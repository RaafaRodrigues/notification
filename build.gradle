import com.diffplug.spotless.LineEnding

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'jacoco'
}

group = 'com.br'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDockVersion}"
	implementation 'org.springframework.kafka:spring-kafka'
	implementation platform("software.amazon.awssdk:bom:${awsSdkBom}")
	implementation 'software.amazon.awssdk:ses'
	implementation 'software.amazon.awssdk:sns';
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jacoco {
	toolVersion = "0.8.11"
}

spotless {
	java {
		target 'src/**/*.java'
		googleJavaFormat()
		removeUnusedImports()
		cleanthat()
		indentWithSpaces(4)
		formatAnnotations()
		lineEndings = LineEnding.UNIX
	}
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
}

check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, exclude: ["**/domain/config/*"])
				})
		)
	}

	dependsOn jacocoTestReport
	violationRules {
		rule {
			limit {
				minimum = 0.90
			}
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	finalizedBy jacocoTestReport
}
